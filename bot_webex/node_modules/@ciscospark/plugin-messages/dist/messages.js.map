{"version":3,"sources":["messages.js"],"names":["debug","require","OUTGOING_MESSAGES_CREATED","INCOMING_MESSAGES_CREATED","Messages","SparkPlugin","extend","initialize","args","prototype","listen","spark","internal","mercury","connect","then","listenTo","event","onConversationActivityEvent","activity","data","activityType","API_ACTIVITY_TYPE","REPLY","verb","API_ACTIVITY_VERB","SHARE","POST","payload","createMessagesEventData","trigger","roomType","target","tags","includes","id","hydraTypes","MESSAGE","roomId","ROOM","text","object","displayName","personId","PEOPLE","actor","personEmail","emailAddress","entryEmail","created","published","files","length","create","message","key","file","logger","warn","reduce","type","options","method","service","resource","request","res","body","get","items","markAsRead","conversation","acknowledge","ack","messageId","markedAsRead","list","qs","Page","remove","statusCode","undefined"],"mappings":"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","file":"messages.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  API_ACTIVITY_TYPE,\n  API_ACTIVITY_VERB,\n  constructHydraId,\n  deconstructHydraId,\n  getHydraFiles,\n  hydraTypes\n} from '@ciscospark/common';\nimport {\n  Page,\n  SparkPlugin\n} from '@ciscospark/spark-core';\nimport {isArray} from 'lodash';\n\nconst debug = require('debug')('messages');\n\nconst OUTGOING_MESSAGES_CREATED = 'created';\nconst INCOMING_MESSAGES_CREATED = 'event:conversation.activity';\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = SparkPlugin.extend({\n  /**\n   * Initializer\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Connect to the web socket to listen to incoming messages.\n   * @returns {Promise}\n   */\n  listen() {\n    return this.spark.internal.mercury.connect()\n      .then(() => this.listenTo(\n        this.spark.internal.mercury,\n        INCOMING_MESSAGES_CREATED,\n        (event) => this.onConversationActivityEvent(event)\n      ));\n  },\n\n  /**\n   * Trigger a \"created\" event.\n   * @param {Object} event\n   * @returns {undefined}\n   */\n  onConversationActivityEvent(event) {\n    const {activity} = event.data;\n\n    // Reply activities are not supported.\n    if (activity.activityType === API_ACTIVITY_TYPE.REPLY) {\n      return;\n    }\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case API_ACTIVITY_VERB.SHARE:\n      case API_ACTIVITY_VERB.POST:\n        const payload = this.createMessagesEventData(activity);\n\n        debug(`messages \"created\" payload: ${JSON.stringify(payload)}`);\n        this.trigger(OUTGOING_MESSAGES_CREATED, payload);\n        break;\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs an event data object for the \"created\" event,\n   * adhering to Hydra's Message details.\n   * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n   * @param {Object} activity from mercury\n   * @returns {Object} constructed event\n   */\n  createMessagesEventData(activity) {\n    const roomType =\n      activity.target.tags.includes('ONE_ON_ONE') ? 'direct' : 'group';\n\n    const event = {\n      id: constructHydraId(hydraTypes.MESSAGE, activity.id),\n      roomId: constructHydraId(hydraTypes.ROOM, activity.target.id),\n      roomType,\n      text: activity.object.displayName,\n      personId: constructHydraId(hydraTypes.PEOPLE, activity.actor.id),\n      personEmail: activity.actor.emailAddress || activity.actor.entryEmail,\n      created: activity.published\n    };\n\n    const files = getHydraFiles(activity);\n\n    if (files.length) {\n      event.files = files;\n    }\n\n    return event;\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * ciscospark.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * ciscospark.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return ciscospark.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Marks a message as read.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   */\n  markAsRead(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const conversation = {\n      id: deconstructHydraId(message.roomId).id\n    };\n\n    return this.spark.internal.conversation.acknowledge(conversation, activity)\n      .then((ack) => ({\n        id: constructHydraId(ack.id),\n        messageId: constructHydraId(hydraTypes.MESSAGE, ack.object.id),\n        markedAsRead: ack.published\n      }));\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * ciscospark.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * ciscospark.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return ciscospark.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return ciscospark.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return ciscospark.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}