{"version":3,"sources":["share-activity.js"],"names":["EMITTER_SYMBOL","FILE_SYMBOL","PROMISE_SYMBOL","ShareActivity","SparkPlugin","extend","getSymbols","file","emitter","namespace","derived","target","deps","fn","conversation","session","required","type","content","clientTempId","displayName","enableThumbnails","default","hiddenSpaceUrl","mentions","spaceUrl","uploads","initialize","attrs","options","prototype","resolve","_spaceUrl","_retrieveSpaceUrl","url","then","_hiddenSpaceUrl","add","upload","get","EventEmitter","name","fileSize","size","byteLength","length","mimeType","objectType","set","promise","logger","thumbnailMaxWidth","config","thumbnailMaxHeight","imageData","main","spark","internal","encryption","encryptBinary","scr","cdata","all","uploadPromise","_upload","metadata","loc","downloadUrl","thumb","thumbnail","fileDimensions","thumbnailDimensions","image","getFiles","files","key","push","uri","qs","transcode","phases","$url","uploadUrl","finalize","$uri","finishUploadUrl","body","remove","delete","prepare","Error","activity","verb","object","undefined","items","promises","forEach","item","contentCategory","_determineContentCategory","_itemContainsActionWithMimeType","map","actions","mimeTypes","split","shift","request","method","res","create","share","parent"],"mappings":"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","file":"share-activity.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\n\nimport {proxyEvents, transferEvents} from '@ciscospark/common';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {filter, map, pick, some} from 'lodash';\nimport {detectFileType, processImage} from '@ciscospark/helper-image';\n\nexport const EMITTER_SYMBOL = Symbol('EMITTER_SYMBOL');\nexport const FILE_SYMBOL = Symbol('FILE_SYMBOL');\nconst PROMISE_SYMBOL = Symbol('PROMISE_SYMBOL');\n\n/**\n * @class\n */\nconst ShareActivity = SparkPlugin.extend({\n  getSymbols() {\n    return {\n      file: FILE_SYMBOL,\n      emitter: EMITTER_SYMBOL\n    };\n  },\n\n  namespace: 'Conversation',\n\n  derived: {\n    target: {\n      deps: ['conversation'],\n      fn() {\n        return this.conversation;\n      }\n    }\n  },\n\n  session: {\n    conversation: {\n      required: true,\n      type: 'object'\n    },\n\n    content: 'string',\n\n    clientTempId: 'string',\n\n    displayName: 'string',\n\n    enableThumbnails: {\n      default: true,\n      type: 'boolean'\n    },\n\n    hiddenSpaceUrl: 'object',\n\n    mentions: 'object',\n\n    spaceUrl: 'object',\n\n    uploads: {\n      type: 'object',\n      default() {\n        return new Map();\n      }\n    }\n  },\n\n  initialize(attrs, options) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (attrs && attrs.conversation) {\n      this.spaceUrl = Promise.resolve(attrs.conversation._spaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space`)\n        .then((url) => {\n          attrs.conversation._spaceUrl = url;\n\n          return url;\n        }));\n\n      this.hiddenSpaceUrl = Promise.resolve(attrs.conversation._hiddenSpaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space/hidden`)\n        .then((url) => {\n          attrs.conversation._hiddenSpaceUrl = url;\n\n          return url;\n        }));\n    }\n  },\n\n  /**\n   * Adds an additional file to the share and begins submitting it to spark\n   * files\n   * @param {File} file\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {EventEmittingPromise}\n   */\n  add(file, options) {\n    options = options || {};\n    let upload = this.uploads.get(file);\n\n    if (upload) {\n      return upload[PROMISE_SYMBOL];\n    }\n    const emitter = new EventEmitter();\n\n    upload = Object.assign({\n      displayName: file.name,\n      fileSize: file.size || file.byteLength || file.length,\n      mimeType: file.type,\n      objectType: 'file',\n      [EMITTER_SYMBOL]: emitter,\n      [FILE_SYMBOL]: file\n    }, pick(options, 'actions'));\n\n    this.uploads.set(file, upload);\n    const promise = detectFileType(file, this.logger)\n      .then((type) => {\n        upload.mimeType = type;\n\n        return processImage({\n          file,\n          type,\n          thumbnailMaxWidth: this.config.thumbnailMaxWidth,\n          thumbnailMaxHeight: this.config.thumbnailMaxHeight,\n          enableThumbnails: this.enableThumbnails,\n          logger: this.logger\n        });\n      })\n      .then((imageData) => {\n        const main = this.spark.internal.encryption.encryptBinary(file)\n          .then(({scr, cdata}) => {\n            upload.scr = scr;\n\n            return Promise.all([cdata, this.spaceUrl]);\n          })\n          .then(([cdata, spaceUrl]) => {\n            const uploadPromise = this._upload(cdata, `${spaceUrl}/upload_sessions`);\n\n            transferEvents('progress', uploadPromise, emitter);\n\n            return uploadPromise;\n          })\n          .then((metadata) => {\n            upload.url = upload.scr.loc = metadata.downloadUrl;\n          });\n\n\n        let thumb;\n\n        if (imageData) {\n          const [thumbnail, fileDimensions, thumbnailDimensions] = imageData;\n\n          Object.assign(upload, fileDimensions);\n\n          if (thumbnail && thumbnailDimensions) {\n            upload.image = thumbnailDimensions;\n            thumb = this.spark.internal.encryption.encryptBinary(thumbnail)\n              .then(({scr, cdata}) => {\n                upload.image.scr = scr;\n\n                return Promise.all([cdata, this.hiddenSpaceUrl]);\n              })\n              .then(([cdata, spaceUrl]) => this._upload(cdata, `${spaceUrl}/upload_sessions`))\n              .then((metadata) => {\n                upload.image.url = upload.image.scr.loc = metadata.downloadUrl;\n              });\n          }\n        }\n\n        return Promise.all([main, thumb]);\n      });\n\n\n    upload[PROMISE_SYMBOL] = promise;\n\n    proxyEvents(emitter, promise);\n\n    return promise;\n  },\n\n  /**\n   * Fetches the files from the share\n   * @returns {Array}\n   */\n  getFiles() {\n    const files = [];\n\n    for (const [key] of this.uploads) {\n      files.push(this.uploads.get(key)[FILE_SYMBOL]);\n    }\n\n    return files;\n  },\n\n\n  /**\n   * @param {File} file\n   * @param {string} uri\n   * @private\n   * @returns {Promise}\n   */\n  _upload(file, uri) {\n    const fileSize = file.length || file.size || file.byteLength;\n\n    return this.spark.upload({\n      uri,\n      file,\n      qs: {\n        transcode: true\n      },\n      phases: {\n        initialize: {fileSize},\n        upload: {\n          $url(session) {\n            return session.uploadUrl;\n          }\n        },\n        finalize: {\n          $uri(session) {\n            return session.finishUploadUrl;\n          },\n          body: {fileSize}\n        }\n      }\n    });\n  },\n\n  /**\n   * Removes the specified file from the share (Does not currently delete the\n   * uploaded file)\n   * @param {File} file\n   * @returns {Promise}\n   */\n  remove(file) {\n    this.uploads.delete(file);\n\n    // Returns a promise for future-proofiness.\n    return Promise.resolve();\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  prepare() {\n    if (!this.uploads.size) {\n      throw new Error('Cannot submit a share activity without atleast one file');\n    }\n\n    const activity = {\n      verb: 'share',\n      object: {\n        objectType: 'content',\n        displayName: this.object && this.object.displayName ? this.object.displayName : undefined,\n        content: this.object && this.object.content ? this.object.content : undefined,\n        mentions: this.object && this.object.mentions ? this.object.mentions : undefined,\n        files: {\n          items: []\n        }\n      },\n      clientTempId: this.clientTempId\n    };\n\n    const promises = [];\n\n    this.uploads.forEach((item) => {\n      activity.object.files.items.push(item);\n      promises.push(item[PROMISE_SYMBOL]);\n    });\n\n    activity.object.contentCategory = this._determineContentCategory(activity.object.files.items);\n\n    return Promise.all(promises)\n      .then(() => activity);\n  },\n\n  /**\n   * @param {Array} items\n   * @param {string} mimeType\n   * @private\n   * @returns {boolean}\n   */\n  _itemContainsActionWithMimeType(items, mimeType) {\n    return some(items.map((item) => some(item.actions, {mimeType})));\n  },\n\n  /**\n   * @param {Array} items\n   * @private\n   * @returns {string}\n   */\n  _determineContentCategory(items) {\n    // determine if the items contain an image\n    if (this._itemContainsActionWithMimeType(items, 'application/x-cisco-spark-whiteboard')) {\n      return 'documents';\n    }\n\n    const mimeTypes = filter(map(items, 'mimeType'));\n\n    if (mimeTypes.length !== items.length) {\n      return 'documents';\n    }\n\n    const contentCategory = mimeTypes[0].split('/').shift();\n\n    if (contentCategory !== 'video' && contentCategory !== 'image') {\n      return 'documents';\n    }\n\n    for (const mimeType of mimeTypes) {\n      if (mimeType.split('/').shift() !== contentCategory) {\n        return 'documents';\n      }\n    }\n\n    return `${contentCategory}s`;\n  },\n\n  /**\n   * @param {string} uri\n   * @returns {Promise}\n   */\n  _retrieveSpaceUrl(uri) {\n    return this.spark.request({\n      method: 'PUT',\n      uri\n    })\n      .then((res) => res.body.spaceUrl);\n  }\n});\n\n/**\n * Instantiates a ShareActivity\n * @param {Object} conversation\n * @param {ShareActivity|Object|array} object\n * @param {ProxySpark} spark\n * @returns {ShareActivity}\n */\nShareActivity.create = function create(conversation, object, spark) {\n  if (object instanceof ShareActivity) {\n    return object;\n  }\n\n  let files;\n\n  if (object && object.object && object.object.files) {\n    files = object.object.files;\n    Reflect.deleteProperty(object.object, 'files');\n  }\n\n  const share = new ShareActivity(Object.assign({\n    conversation\n  }, object), {\n    parent: spark\n  });\n\n  files = files && files.items || files;\n  if (files) {\n    files.forEach((file) => share.add(file));\n  }\n\n  return share;\n};\n\nexport default ShareActivity;\n"]}