{"version":3,"sources":["index.js"],"names":["default","ConversationError","InvalidUserCreation","Conversation","payloadTransformer","predicates","name","test","ctx","optionsOrResponse","resolve","extract","body","direction","event","activity","options","items","transforms","fn","array","all","map","item","transform","then","decrypt","object","objectType","content","spark","config","conversation","inboundProcessFunc","allowedInboundTags","allowedInboundStyles","c","outboundProcessFunc","allowedOutboundTags","allowedOutboundStyles","activities","participants","actor","target","person","email","entryEmail","emailAddress","id","entryUUID","patterns","toLowerCase","roomProperties","isModerator","Boolean","uuid","reject","Error","internal","user","asUUID","concat","decryptionTransforms","encryptionTransforms"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@ciscospark/internal-plugin-encryption';\nimport '@ciscospark/internal-plugin-user';\n\nimport {patterns} from '@ciscospark/common';\nimport {filter as htmlFilter, filterEscape as htmlFilterEscape} from '@ciscospark/helper-html';\nimport {registerInternalPlugin} from '@ciscospark/spark-core';\nimport Conversation from './conversation';\nimport config from './config';\nimport {capitalize, get, has} from 'lodash';\n\nimport {transforms as encryptionTransforms} from './encryption-transforms';\nimport {transforms as decryptionTransforms} from './decryption-transforms';\n\nregisterInternalPlugin('conversation', Conversation, {\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'transformObject',\n        test(ctx, optionsOrResponse) {\n          return Promise.resolve(has(optionsOrResponse, 'body.objectType'));\n        },\n        extract(optionsOrResponse) {\n          return Promise.resolve(optionsOrResponse.body);\n        }\n      },\n      {\n        name: 'transformObject',\n        direction: 'inbound',\n        test(ctx, event) {\n          return Promise.resolve(has(event, 'activity'));\n        },\n        extract(event) {\n          return Promise.resolve(event.activity);\n        }\n      },\n      {\n        name: 'normalizeConversationListAndBindDecrypters',\n        direction: 'inbound',\n        test(ctx, options) {\n          if (!has(options, 'body.items[0].objectType')) {\n            return Promise.resolve(false);\n          }\n\n          if (get(options, 'options.deferDecrypt')) {\n            return Promise.resolve(true);\n          }\n\n          return Promise.resolve(false);\n        },\n        extract(options) {\n          return Promise.resolve(options.body.items);\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        direction: 'inbound',\n        test(ctx, options) {\n          if (!has(options, 'body.items[0].objectType')) {\n            return Promise.resolve(false);\n          }\n\n          if (get(options, 'options.deferDecrypt')) {\n            return Promise.resolve(false);\n          }\n\n          return Promise.resolve(true);\n        },\n        extract(options) {\n          return Promise.resolve(options.body.items);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'normalizeConversationListAndBindDecrypters',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('normalizeObject', item)\n            .then(() => {\n              item.decrypt = function decrypt() {\n                Reflect.deleteProperty(item, 'decrypt');\n\n                return ctx.transform('decryptObject', item);\n              };\n\n              return item;\n            })));\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('transformObject', item)));\n        }\n      },\n      {\n        name: 'transformObject',\n        direction: 'outbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.objectType) {\n            return Promise.resolve();\n          }\n\n          return ctx.transform('normalizeObject', object)\n            .then(() => ctx.transform('encryptObject', object))\n            .then(() => ctx.transform('encryptKmsMessage', object));\n        }\n      },\n      {\n        name: 'transformObject',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.objectType) {\n            return Promise.resolve();\n          }\n\n          return ctx.transform('decryptObject', object)\n            .then(() => ctx.transform('normalizeObject', object));\n        }\n      },\n      {\n        name: 'normalizeObject',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.objectType) {\n            return Promise.resolve();\n          }\n\n          return Promise.all([\n            ctx.transform(`normalize${capitalize(object.objectType)}`, object),\n            ctx.transform('normalizePropContent', object)\n          ]);\n        }\n      },\n      {\n        name: 'normalizePropContent',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object.content) {\n            return Promise.resolve();\n          }\n          const {\n            inboundProcessFunc,\n            allowedInboundTags,\n            allowedInboundStyles\n          } = ctx.spark.config.conversation;\n\n          return htmlFilter(inboundProcessFunc, allowedInboundTags || {}, allowedInboundStyles, object.content)\n            .then((c) => {\n              object.content = c;\n            });\n        }\n      },\n      {\n        name: 'normalizePropContent',\n        direction: 'outbound',\n        fn(ctx, object) {\n          if (!object.content) {\n            return Promise.resolve();\n          }\n\n          const {\n            outboundProcessFunc,\n            allowedOutboundTags,\n            allowedOutboundStyles\n          } = ctx.spark.config.conversation;\n\n          return htmlFilterEscape(outboundProcessFunc, allowedOutboundTags || {}, allowedOutboundStyles, object.content)\n            .then((c) => {\n              object.content = c;\n            });\n        }\n      },\n      {\n        name: 'normalizeConversation',\n        fn(ctx, conversation) {\n          conversation.activities = conversation.activities || {};\n          conversation.activities.items = conversation.activities.items || [];\n          conversation.participants = conversation.participants || {};\n          conversation.participants.items = conversation.participants.items || [];\n\n          return Promise.all([\n            Promise.all(conversation.activities.items.map((item) => ctx.transform('normalizeObject', item))),\n            Promise.all(conversation.participants.items.map((item) => ctx.transform('normalizeObject', item)))\n          ]);\n        }\n      },\n      {\n        name: 'normalizeActivity',\n        fn(ctx, activity) {\n          return Promise.all([\n            ctx.transform('normalizeObject', activity.actor),\n            ctx.transform('normalizeObject', activity.object),\n            ctx.transform('normalizeObject', activity.target)\n          ]);\n        }\n      },\n      {\n        name: 'normalizePerson',\n        // eslint-disable-next-line complexity\n        fn(ctx, person) {\n          const email = person.entryEmail || person.emailAddress || person.id;\n          const id = person.entryUUID || person.id;\n\n          if (patterns.email.test(email)) {\n            person.entryEmail = person.emailAddress = email.toLowerCase();\n          }\n          else {\n            Reflect.deleteProperty(person, 'entryEmail');\n            Reflect.deleteProperty(person, 'emailAddress');\n          }\n\n          if (person.roomProperties) {\n            person.roomProperties.isModerator = Boolean(person.roomProperties.isModerator);\n          }\n\n          if (patterns.uuid.test(id)) {\n            person.entryUUID = person.id = id.toLowerCase();\n\n            return Promise.resolve(person);\n          }\n\n          if (!email) {\n            return Promise.reject(new Error('cannot determine id without an `emailAddress` or `entryUUID` property'));\n          }\n\n          return ctx.spark.internal.user.asUUID(email)\n            .then((uuid) => {\n              person.entryUUID = person.id = uuid;\n\n              return person;\n            });\n        }\n      }\n    ]\n      .concat(decryptionTransforms)\n      .concat(encryptionTransforms)\n  },\n  config\n});\n\nexport {default} from './conversation';\nexport {default as ShareActivity} from './share-activity';\nexport {ConversationError, InvalidUserCreation} from './convo-error';\n"]}