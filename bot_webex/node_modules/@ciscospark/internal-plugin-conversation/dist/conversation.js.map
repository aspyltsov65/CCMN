{"version":3,"sources":["conversation.js"],"names":["Conversation","SparkPlugin","extend","namespace","acknowledge","conversation","object","activity","reject","Error","_inferConversationUrl","then","prepare","verb","target","prepareConversation","objectType","id","url","a","submit","add","participant","spark","internal","user","asUUID","create","kmsMessage","method","uri","resourceUri","userIds","params","options","participants","length","all","map","catch","err","allowPartialCreation","undefined","unshift","device","userId","validParticipants","filter","forceGrouped","InvalidUserCreation","skipOneOnOneFetch","_createOneOnOne","_maybeCreateOneOnOneThenPost","_createGrouped","c","files","share","activities","items","push","delete","download","item","isEncrypted","Boolean","scr","key","shunt","EventEmitter","promise","encryption","loc","_downloadUnencryptedFile","on","args","emit","res","file","logger","info","displayName","name","type","mimeType","responseType","request","body","expand","actor","get","qs","uuidEntryFormat","personRefresh","activitiesLimit","includeConvWithDeletedUserUUID","includeParticipants","resolve","service","resource","_recordUUIDs","leave","querystring","stringify","authId","list","_list","deferDecrypt","listLeft","listActivities","_listActivities","mentions","listMentions","muteMentions","tag","tags","muteMessages","post","message","act","clientTempId","uuid","v4","forEach","split","pop","content","processActivityEvent","event","transform","removeAllMuteTags","untag","makeShare","ShareActivity","assign","avatar","size","enableThumbnails","updateTypingStatus","eventType","typing","conversationId","transcode","async","trigger","unassign","unmuteMentions","unmuteMessages","update","updateKey","_updateKey","kms","createUnboundKeys","count","keys","k","defaultActivityEncryptionKeyUrl","keyUris","_create","payload","forceCreate","_prepareConversationForCreation","feature","getFeature","haMessagingEnabled","getServiceUrl","process","env","NODE_ENV","warn","participantsLimit","published","reverse","comment","html","reason","statusCode","recordUUID","entryUUID","prototype","submitSimpleActivity","submitModerationChangeActivity","moderator","fnName","startsWith","submitSpacePropertyActivity","submitObjectActivity"],"mappings":"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","file":"conversation.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {proxyEvents, tap} from '@ciscospark/common';\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {cloneDeep, defaults, isArray, isObject, isString, last, map, merge, omit, pick, uniq} from 'lodash';\nimport {readExifData} from '@ciscospark/helper-image';\nimport uuid from 'uuid';\nimport querystring from 'querystring';\nimport {InvalidUserCreation} from './convo-error';\nimport ShareActivity from './share-activity';\nimport {EventEmitter} from 'events';\n\nconst Conversation = SparkPlugin.extend({\n  namespace: 'Conversation',\n\n  acknowledge(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb: 'acknowledge',\n        target: this.prepareConversation(conversation),\n        object: {\n          objectType: 'activity',\n          id: object.id,\n          url: object.url\n        }\n      }))\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Adds a participant to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  add(conversation, participant, activity) {\n    return this._inferConversationUrl(conversation)\n      .then(() => this.spark.internal.user.asUUID(participant, {create: true}))\n      .then((id) => this.prepare(activity, {\n        verb: 'add',\n        target: this.prepareConversation(conversation),\n        object: {\n          id,\n          objectType: 'person'\n        },\n        kmsMessage: {\n          method: 'create',\n          uri: '/authorizations',\n          resourceUri: '<KRO>',\n          userIds: [\n            id\n          ]\n        }\n      })\n        .then((a) => this.submit(a)));\n  },\n\n  /**\n   * Creates a conversation\n   * @param {Object} params\n   * @param {Array<Participant>} params.participants\n   * @param {Array<File>} params.files\n   * @param {string} params.comment\n   * @param {string} params.html\n   * @param {Object} params.displayName\n   * @param {Object} options\n   * @param {Boolean} options.allowPartialCreation\n   * @param {Boolean} options.forceGrouped\n   * @param {Boolean} options.skipOneOnOneFetch skips checking 1:1 exists before creating conversation\n   * @returns {Promise<Conversation>}\n   */\n  create(params, options) {\n    options = options || {};\n\n    if (!params.participants || params.participants.length === 0) {\n      return Promise.reject(new Error('`params.participants` is required'));\n    }\n\n    return Promise.all(params.participants.map((participant) => this.spark.internal.user.asUUID(participant, {create: true})\n      // eslint-disable-next-line arrow-body-style\n      .catch((err) => {\n        return options.allowPartialCreation ? undefined : Promise.reject(err);\n      })))\n      .then((participants) => {\n        participants.unshift(this.spark.internal.device.userId);\n        participants = uniq(participants);\n\n        const validParticipants = participants.filter((participant) => participant);\n\n        params.participants = validParticipants;\n\n        // check if original participants list was to create a 1:1\n        if (participants.length === 2 && !(options && options.forceGrouped)) {\n          if (!params.participants[1]) {\n            return Promise.reject(new InvalidUserCreation());\n          }\n\n          if (options.skipOneOnOneFetch) {\n            return this._createOneOnOne(params);\n          }\n\n          return this._maybeCreateOneOnOneThenPost(params, options);\n        }\n\n        return this._createGrouped(params, options);\n      })\n      .then((c) => {\n        if (!params.files) {\n          return c;\n        }\n\n        return this.spark.internal.conversation.share(c, params.files)\n          .then((a) => {\n            c.activities.items.push(a);\n\n            return c;\n          });\n      });\n  },\n\n  delete(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb: 'delete',\n        target: this.prepareConversation(conversation),\n        object: pick(object, 'id', 'url', 'objectType')\n      }))\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Downloads the file specified in item.scr or item.url\n   * @param {Object} item\n   * @param {Object} item.scr\n   * @param {string} item.url\n   * @param {Object} options\n   * @param {Object} options.headers\n   * @returns {Promise<File>}\n   */\n  download(item, options) {\n    const isEncrypted = Boolean(item.scr && item.scr.key);\n    const shunt = new EventEmitter();\n    let promise;\n\n    if (isEncrypted) {\n      promise = this.spark.internal.encryption.download(item.scr);\n    }\n    else if (item.scr && item.scr.loc) {\n      promise = this._downloadUnencryptedFile(item.scr.loc, options);\n    }\n    else {\n      promise = this._downloadUnencryptedFile(item.url, options);\n    }\n\n    promise = promise\n      .on('progress', (...args) => shunt.emit('progress', ...args))\n      .then((res) => readExifData(item, res))\n      .then((file) => {\n        this.logger.info('conversation: file downloaded');\n\n        if (item.displayName && !file.name) {\n          file.name = item.displayName;\n        }\n\n        if (!file.type && item.mimeType) {\n          file.type = item.mimeType;\n        }\n\n        return file;\n      });\n\n    proxyEvents(shunt, promise);\n\n    return promise;\n  },\n\n  /**\n   * Downloads an unencrypted file\n   * @param {string} uri\n   * @param {Object} options\n   * @param {Ojbect} options.headers\n   * @returns {Promise<File>}\n   */\n  _downloadUnencryptedFile(uri, options) {\n    options = options || {};\n    Object.assign(options, {\n      uri,\n      responseType: 'buffer'\n    });\n\n    const promise = this.request(options)\n      .then((res) => res.body);\n\n    proxyEvents(options.download, promise);\n\n    return promise;\n  },\n\n  /**\n   * Helper method that expands a set of parameters into an activty object\n   * @param {string} verb\n   * @param {Object} object\n   * @param {Object} target\n   * @param {Object|string} actor\n   * @returns {Object}\n   */\n  expand(verb, object, target, actor) {\n    const activity = {\n      actor,\n      objectType: 'activity',\n      verb\n    };\n\n    if (!actor) {\n      actor = this.spark.internal.device.userId;\n    }\n\n    if (isString(actor)) {\n      activity.actor = {\n        objectType: 'person',\n        id: actor\n      };\n    }\n\n    if (object) {\n      activity.object = object;\n    }\n\n    if (target) {\n      activity.target = target;\n    }\n\n    return activity;\n  },\n\n  /**\n   * Fetches a single conversation\n   * @param {Object} conversation\n   * @param {Object} options\n   * @returns {Promise<Conversation>}\n   */\n  get(conversation, options) {\n    return this._inferConversationUrl(conversation)\n      .then(() => {\n        const {user, url} = conversation;\n\n        options = options || {};\n\n        const params = {\n          qs: Object.assign({\n            uuidEntryFormat: true,\n            personRefresh: true,\n            activitiesLimit: 0,\n            includeConvWithDeletedUserUUID: false,\n            includeParticipants: false\n          }, omit(options, 'id', 'user', 'url'))\n        };\n\n        return Promise.resolve(user ? this.spark.internal.user.asUUID(user) : null)\n          .then((userId) => {\n            if (userId) {\n              Object.assign(params, {\n                service: 'conversation',\n                resource: `conversations/user/${userId}`\n              });\n            }\n            else {\n              params.uri = url;\n            }\n\n            return this.request(params);\n          });\n      })\n      .then(tap((res) => this._recordUUIDs(res.body)))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Leaves the conversation or removes the specified user from the specified\n   * conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant If not specified, defaults to current\n   * user\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  leave(conversation, participant, activity) {\n    return this._inferConversationUrl(conversation)\n      .then(() => {\n        if (!participant) {\n          participant = this.spark.internal.device.userId;\n        }\n\n        return this.spark.internal.user.asUUID(participant)\n          .then((id) => this.prepare(activity, {\n            verb: 'leave',\n            target: this.prepareConversation(conversation),\n            object: {\n              id,\n              objectType: 'person'\n            },\n            kmsMessage: {\n              method: 'delete',\n              uri: `<KRO>/authorizations?${querystring.stringify({authId: id})}`\n            }\n          }));\n      })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Lists a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @returns {Promise<Array<Conversation>>}\n   */\n  list(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations',\n      qs: omit(options, 'deferDecrypt'),\n      deferDecrypt: options.deferDecrypt\n    });\n  },\n\n  /**\n   * Lists the conversations the current user has left. By default does not\n   * fetch activities or participants\n   * @param {Object} options\n   * @returns {Promise<Array<Conversation>>}\n   */\n  listLeft(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations/left',\n      qs: options\n    });\n  },\n\n  /**\n   * List activities for the specified conversation\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listActivities(options) {\n    return this._listActivities(Object.assign(options, {mentions: false}));\n  },\n\n  /**\n   * Lists activities in which the current user was mentioned\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listMentions(options) {\n    return this._listActivities(Object.assign(options, {mentions: true}));\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Posts a message to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} message if string, treated as plaintext; if object,\n   * assumed to be object property of `post` activity\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  post(conversation, message, activity) {\n    if (isString(message)) {\n      message = {\n        displayName: message\n      };\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb: 'post',\n        target: this.prepareConversation(conversation),\n        object: Object.assign({objectType: 'comment'}, message)\n      }))\n      .then((a) => this.submit(a));\n  },\n\n  prepareConversation(conversation) {\n    return defaults(pick(conversation, 'id', 'url', 'objectType', 'defaultActivityEncryptionKeyUrl', 'kmsResourceObjectUrl'), {\n      objectType: 'conversation'\n    });\n  },\n\n  prepare(activity, params) {\n    params = params || {};\n    activity = activity || {};\n\n    return Promise.resolve(activity.prepare ? activity.prepare(params) : activity)\n      .then((act) => {\n        defaults(act, {\n          verb: params.verb,\n          kmsMessage: params.kmsMessage,\n          objectType: 'activity',\n          clientTempId: uuid.v4(),\n          actor: this.spark.internal.device.userId\n        }, pick(activity, 'activityType', 'parentActivityId'));\n\n        if (isString(act.actor)) {\n          act.actor = {\n            objectType: 'person',\n            id: act.actor\n          };\n        }\n\n        ['actor', 'object'].forEach((key) => {\n          if (params[key]) {\n            act[key] = act[key] || {};\n            defaults(act[key], params[key]);\n          }\n        });\n\n        if (params.target) {\n          merge(act, {\n            target: pick(params.target, 'id', 'url', 'objectType', 'kmsResourceObjectUrl', 'defaultActivityEncryptionKeyUrl')\n          });\n        }\n\n        ['object', 'target'].forEach((key) => {\n          if (act[key] && act[key].url && !act[key].id) {\n            act[key].id = act[key].url.split('/').pop();\n          }\n        });\n\n        ['actor', 'object', 'target'].forEach((key) => {\n          if (act[key] && !act[key].objectType) {\n            // Reminder: throwing here because it's the only way to get out of\n            // this loop in event of an error.\n            throw new Error(`\\`act.${key}.objectType\\` must be defined`);\n          }\n        });\n\n        if (act.object && act.object.content && !act.object.displayName) {\n          return Promise.reject(new Error('Cannot submit activity object with `content` but no `displayName`'));\n        }\n\n        return act;\n      });\n  },\n\n  /**\n   * Handles incoming conversation.activity mercury messages\n   * @param {Event} event\n   * @returns {Promise}\n   */\n  processActivityEvent(event) {\n    return this.spark.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Removes all mute-related tags\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  removeAllMuteTags(conversation, activity) {\n    return this.untag(conversation, {\n      tags: [\n        'MENTION_NOTIFICATIONS_OFF',\n        'MENTION_NOTIFICATIONS_ON',\n        'MESSAGE_NOTIFICATIONS_OFF',\n        'MESSAGE_NOTIFICATIONS_ON'\n      ]\n    }, activity);\n  },\n\n  /**\n   * Creates a ShareActivty for the specified conversation\n   * @param {Object} conversation\n   * @param {Object} activity\n   * @returns {ShareActivty}\n   */\n  makeShare(conversation, activity) {\n    // if we pass activity as null then it does not take care of the\n    // clientTempId created by the web-client while making the provisional\n    // activity, hence we need to pass the activity which was created by the\n    // web-client. This fixes the issue where the image activities do not come\n    // back properly oriented from the server since the clientTempId is missing\n    return ShareActivity.create(conversation, activity, this.spark);\n  },\n\n  /**\n   * Assigns an avatar to a room\n   * @param {Object} conversation\n   * @param {File} avatar\n   * @returns {Promise<Activity>}\n   */\n  assign(conversation, avatar) {\n    if ((avatar.size || avatar.length) > 1024 * 1024) {\n      return Promise.reject(new Error('Room avatars must be less than 1MB'));\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => {\n        const activity = ShareActivity.create(conversation, null, this.spark);\n\n        activity.enableThumbnails = false;\n        activity.add(avatar);\n\n        return this.prepare(activity, {\n          target: this.prepareConversation(conversation)\n        });\n      })\n      .then((a) => {\n        // yes, this seems a little hacky; will likely be resolved as a result\n        // of #213\n        a.verb = 'assign';\n\n        return this.submit(a);\n      });\n  },\n\n  /**\n   * Sets the typing status of the current user in a conversation\n   *\n   * @param {Object} conversation\n   * @param {Object} options\n   * @param {boolean} options.typing\n   * @returns {Promise}\n   */\n  updateTypingStatus(conversation, options) {\n    if (!conversation.id) {\n      if (conversation.url) {\n        conversation.id = conversation.url.split('/').pop();\n      }\n      else {\n        return Promise.reject(new Error('conversation: could not identify conversation'));\n      }\n    }\n\n    let eventType;\n\n    if (options.typing) {\n      eventType = 'status.start_typing';\n    }\n    else {\n      eventType = 'status.stop_typing';\n    }\n\n    const params = {\n      method: 'POST',\n      service: 'conversation',\n      resource: 'status/typing',\n      body: {\n        conversationId: conversation.id,\n        eventType\n      }\n    };\n\n    return this.request(params);\n  },\n\n  /**\n   * Shares files to the specified converstion\n   * @param {Object} conversation\n   * @param {ShareActivity|Array<File>} activity\n   * @returns {Promise<Activity>}\n   */\n  share(conversation, activity) {\n    if (isArray(activity)) {\n      activity = {\n        object: {\n          files: activity\n        }\n      };\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => {\n        if (!(activity instanceof ShareActivity)) {\n          activity = ShareActivity.create(conversation, activity, this.spark);\n        }\n\n        return this.prepare(activity, {\n          target: this.prepareConversation(conversation)\n        });\n      })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Submits an activity to the conversation service\n   * @param {Object} activity\n   * @returns {Promise<Activity>}\n   */\n  submit(activity) {\n    const params = {\n      method: 'POST',\n      service: 'conversation',\n      resource: activity.verb === 'share' ? 'content' : 'activities',\n      body: activity,\n      qs: {\n        personRefresh: true\n      }\n    };\n\n    if (activity.verb === 'share') {\n      Object.assign(params.qs, {\n        transcode: true,\n        async: false\n      });\n    }\n\n    // triggers user-activity to reset logout timer\n    this.spark.trigger('user-activity');\n\n    return this.request(params)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Remove the avatar from a room\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise}\n   */\n  unassign(conversation, activity) {\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb: 'unassign',\n        target: this.prepareConversation(conversation),\n        object: {\n          objectType: 'content',\n          files: {\n            items: []\n          }\n        }\n      }))\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  update(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb: 'update',\n        target: this.prepareConversation(conversation),\n        object\n      }))\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  updateKey(conversation, key, activity) {\n    return this._inferConversationUrl(conversation)\n      .then(() => this.get(conversation, {\n        activitiesLimit: 0,\n        includeParticipants: true\n      }))\n      .then((c) => this._updateKey(c, key, activity));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _updateKey(conversation, key, activity) {\n    return Promise.resolve(key || this.spark.internal.encryption.kms.createUnboundKeys({count: 1}))\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n        const params = {\n          verb: 'updateKey',\n          target: this.prepareConversation(conversation),\n          object: {\n            defaultActivityEncryptionKeyUrl: k.uri,\n            objectType: 'conversation'\n          }\n        };\n\n        // Reminder: the kmsResourceObjectUrl is only usable if there is\n        // defaultActivityEncryptionKeyUrl.\n        if (conversation.defaultActivityEncryptionKeyUrl) {\n          params.kmsMessage = {\n            method: 'update',\n            resourceUri: '<KRO>',\n            uri: k.uri\n          };\n        }\n        else {\n          params.kmsMessage = {\n            method: 'create',\n            uri: '/resources',\n            userIds: map(conversation.participants.items, 'id'),\n            keyUris: [\n              k.uri\n            ]\n          };\n        }\n\n        return this.prepare(activity, params)\n          .then((a) => this.submit(a));\n      });\n  },\n\n  /**\n   * @param {Object} payload\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _create(payload, options) {\n    options = options || {};\n\n    return this.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'conversations',\n      body: payload,\n      qs: {\n        forceCreate: options.allowPartialCreation\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createGrouped(params, options) {\n    return this._create(this._prepareConversationForCreation(params), options);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createOneOnOne(params) {\n    const payload = this._prepareConversationForCreation(params);\n\n    payload.tags = ['ONE_ON_ONE'];\n\n    return this._create(payload);\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _inferConversationUrl(conversation) {\n    if (conversation.id) {\n      return this.spark.internal.feature.getFeature('developer', 'web-high-availability')\n        .then((haMessagingEnabled) => {\n          if (haMessagingEnabled) {\n            // recompute conversation URL each time as the host may have changed\n            // since last usage\n            return this.spark.internal.device.getServiceUrl('conversation')\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n\n                return conversation;\n              });\n          }\n          if (!conversation.url) {\n            return this.spark.internal.device.getServiceUrl('conversation')\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n                /* istanbul ignore else */\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.warn('conversation: inferred conversation url from conversation id; please pass whole conversation objects to Conversation methods');\n                }\n\n                return conversation;\n              });\n          }\n\n          return Promise.resolve(conversation);\n        });\n    }\n\n    return Promise.resolve(conversation);\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Activity>>}\n   */\n  _listActivities(options) {\n    return this._list({\n      service: 'conversation',\n      resource: options.mentions ? 'mentions' : 'activities',\n      qs: omit(options, 'mentions')\n    });\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Conversation>>}\n   */\n  _list(options) {\n    options.qs = Object.assign({\n      personRefresh: true,\n      uuidEntryFormat: true,\n      activitiesLimit: 0,\n      participantsLimit: 0\n    }, options.qs);\n\n    return this.request(options)\n      .then((res) => {\n        if (!res.body || !res.body.items || res.body.items.length === 0) {\n          return [];\n        }\n\n        const {items} = res.body;\n\n        if (last(items).published < items[0].published) {\n          items.reverse();\n        }\n\n        return Promise.all(items.map((item) => this._recordUUIDs(item)))\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => items);\n      });\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Conversation>}\n   */\n  _maybeCreateOneOnOneThenPost(params, options) {\n    return this.get(defaults({\n      // the use of uniq in Conversation#create guarantees participant[1] will\n      // always be the other user\n      user: params.participants[1]\n    }), Object.assign(options, {includeConvWithDeletedUserUUID: true, includeParticipants: true}))\n      .then((conversation) => {\n        if (params.comment || params.html) {\n          return this.post(conversation, {content: params.html, displayName: params.comment})\n            .then((activity) => {\n              conversation.activities.items.push(activity);\n\n              return conversation;\n            });\n        }\n\n        return conversation;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 404) {\n          return Promise.reject(reason);\n        }\n\n        return this._createOneOnOne(params);\n      });\n  },\n\n  /**\n   * @param {Object} params\n   * @private\n   * @returns {Object}\n   */\n  _prepareConversationForCreation(params) {\n    const payload = {\n      activities: {\n        items: [\n          this.expand('create')\n        ]\n      },\n      objectType: 'conversation',\n      kmsMessage: {\n        method: 'create',\n        uri: '/resources',\n        userIds: cloneDeep(params.participants),\n        keyUris: []\n      }\n    };\n\n    if (params.displayName) {\n      payload.displayName = params.displayName;\n    }\n\n    params.participants.forEach((participant) => {\n      payload.activities.items.push(this.expand('add', {\n        objectType: 'person',\n        id: participant\n      }));\n    });\n\n    if (params.comment) {\n      payload.activities.items.push(this.expand('post', {\n        objectType: 'comment',\n        content: params.html,\n        displayName: params.comment\n      }));\n    }\n\n    return payload;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _recordUUIDs(conversation) {\n    if (!conversation.participants || !conversation.participants.items) {\n      return Promise.resolve(conversation);\n    }\n\n    return Promise.all(conversation.participants.items.map((participant) => {\n      // ROOMs do not have email addresses, so there's no point attempting to\n      // record their UUIDs.\n      if (participant.type === 'ROOM') {\n        return Promise.resolve();\n      }\n\n      return this.spark.internal.user.recordUUID(participant)\n        .catch((err) => this.logger.warn(`Could not record uuid for ${participant.id || participant.entryUUID}`, err));\n    }));\n  }\n});\n\n[\n  'favorite',\n  'hide',\n  'lock',\n  'mute',\n  'unfavorite',\n  'unhide',\n  'unlock',\n  'unmute'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitSimpleActivity(conversation, activity) {\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb,\n        object: this.prepareConversation(conversation)\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'assignModerator',\n  'unassignModerator'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitModerationChangeActivity(conversation, moderator, activity) {\n    return Promise.all([\n      this._inferConversationUrl(conversation),\n      moderator ? this.spark.internal.user.asUUID(moderator) : this.spark.internal.device.userId\n    ])\n      .then(([c, userId]) => this.prepare(activity, {\n        verb,\n        target: this.prepareConversation(c),\n        object: {\n          id: userId,\n          objectType: 'person'\n        }\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n/**\n * Sets/unsets space property for convo\n * @param {Object} conversation\n * @param {string} tag\n * @param {Activity} activity\n * @returns {Promise<Activity>}\n */\n[\n  'setSpaceProperty',\n  'unsetSpaceProperty'\n].forEach((fnName) => {\n  const verb = fnName.startsWith('set') ? 'set' : 'unset';\n\n  Conversation.prototype[fnName] = function submitSpacePropertyActivity(conversation, tag, activity) {\n    if (!isString(tag)) {\n      return Promise.reject(new Error('`tag` must be a string'));\n    }\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb,\n        target: this.prepareConversation(conversation),\n        object: {\n          tags: [tag],\n          objectType: 'spaceProperty'\n        }\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'tag',\n  'untag'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitObjectActivity(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const c = this.prepareConversation(conversation);\n\n    return this._inferConversationUrl(conversation)\n      .then(() => this.prepare(activity, {\n        verb,\n        target: c,\n        object: Object.assign(c, object)\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\nexport default Conversation;\n"]}