/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */
/* eslint-disable no-underscore-dangle */
import {assert} from '@ciscospark/test-helper-chai';
import MockSpark from '@ciscospark/test-helper-mock-spark';
import sinon from '@ciscospark/test-helper-sinon';
import Conversation from '@ciscospark/internal-plugin-conversation';

describe('plugin-conversation', () => {
  describe('Conversation', () => {
    let spark;

    const convoUrl = 'https://conv-test.wbx2.com/conversation';

    beforeEach(() => {
      spark = new MockSpark({
        children: {
          conversation: Conversation
        }
      });

      spark.internal.device.getServiceUrl = sinon.stub().returns(Promise.resolve(convoUrl));
    });

    describe('#_inferConversationUrl', () => {
      const testConvo = {test: 'convo'};

      it('Returns given convo if no id', () => spark.internal.conversation._inferConversationUrl(testConvo)
        .then((convo) => {
          assert.notCalled(spark.internal.feature.getFeature);
          assert.notCalled(spark.internal.device.getServiceUrl);
          assert.equal(convo.test, 'convo');
        }));

      describe('HA is disabled', () => {
        beforeEach(() => {
          spark.internal.feature.getFeature = sinon.stub().returns(Promise.resolve(false));
          testConvo.id = 'id1';
        });
        it('returns unmodified convo if URL is defined', () => {
          testConvo.url = 'http://example.com';

          return spark.internal.conversation._inferConversationUrl(testConvo)
            .then((convo) => {
              assert.called(spark.internal.feature.getFeature);
              assert.notCalled(spark.internal.device.getServiceUrl);
              assert.equal(convo.url, 'http://example.com');
            });
        });
        it('builds URL if not defined', () => {
          delete testConvo.url;

          return spark.internal.conversation._inferConversationUrl(testConvo)
            .then((convo) => {
              assert.called(spark.internal.feature.getFeature);
              assert.called(spark.internal.device.getServiceUrl);
              assert.equal(convo.url, `${convoUrl}/conversations/id1`);
            });
        });
      });
      describe('HA is enabled', () => {
        beforeEach(() => {
          spark.internal.feature.getFeature = sinon.stub().returns(Promise.resolve(true));
          testConvo.id = 'id1';
        });
        it('builds URL if already defined', () => {
          testConvo.url = 'https://example.com';

          return spark.internal.conversation._inferConversationUrl(testConvo)
            .then((convo) => {
              assert.called(spark.internal.feature.getFeature);
              assert.called(spark.internal.device.getServiceUrl);
              assert.equal(convo.url, `${convoUrl}/conversations/id1`);
            });
        });
        it('builds URL if not defined', () => {
          delete testConvo.url;

          return spark.internal.conversation._inferConversationUrl(testConvo)
            .then((convo) => {
              assert.called(spark.internal.feature.getFeature);
              assert.called(spark.internal.device.getServiceUrl);
              assert.equal(convo.url, `${convoUrl}/conversations/id1`);
            });
        });
      });
    });
  });
});
