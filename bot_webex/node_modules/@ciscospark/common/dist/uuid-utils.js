'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constructHydraId = constructHydraId;
exports.deconstructHydraId = deconstructHydraId;
exports.getHydraFiles = getHydraFiles;

var _base = require('./base64');

var _constants = require('./constants');

var hydraBaseResource = 'ciscospark://us';
var hydraBaseUrl = 'https://api.ciscospark.com/v1';

/**
 * Constructs a Hydra ID for a given UUID and type.
 *
 * @export
 * @param {string} type one of PEOPLE, TEAM, ROOM
 * @param {any} id
 * @returns {string}
 */
function constructHydraId(type, id) {
  return (0, _base.encode)(hydraBaseResource + '/' + type.toUpperCase() + '/' + id);
}

/**
 * Deconstructs a Hydra ID and provides the UUID.
 *
 * @export
 * @param {String} id
 * @returns {String}
 */
function deconstructHydraId(id) {
  var payload = (0, _base.decode)(id).split('/');

  return {
    id: payload.pop(),
    type: payload.pop()
  };
}

/**
 * Returns file URLs for the activity, adhering to Hydra details,
 * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...
 * @see https://developer.webex.com/docs/api/v1/messages/get-message-details
 * @param {Object} activity from mercury
 * @returns {Array} file URLs
 */
function getHydraFiles(activity) {
  var hydraFiles = [];
  var files = activity.object.files;


  if (files) {
    var items = files.items;

    // Note: Generated ID is dependent on file order.

    for (var i = 0; i < items.length; i += 1) {
      var contentId = constructHydraId(_constants.hydraTypes.CONTENT, activity.id + '/' + i);

      hydraFiles.push(hydraBaseUrl + '/contents/' + contentId);
    }
  }

  return hydraFiles;
}
//# sourceMappingURL=uuid-utils.js.map
