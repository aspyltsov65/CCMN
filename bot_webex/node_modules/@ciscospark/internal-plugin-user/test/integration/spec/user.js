/*!
 * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.
 */

import '@ciscospark/internal-plugin-user';

import querystring from 'querystring';
import url from 'url';

import {assert} from '@ciscospark/test-helper-chai';
import sinon from '@ciscospark/test-helper-sinon';
import CiscoSpark from '@ciscospark/spark-core';
import testUsers from '@ciscospark/test-helper-test-users';
import {patterns} from '@ciscospark/common';
import uuid from 'uuid';
import {merge} from 'lodash';

// Run the tests with and without Federation enabled,
// for test users in EU (Federation) and US
// Also try US user with Federation enabled
const runs = [
  {it: 'with EU user with Federation enabled', EUUser: true, attrs: {config: {credentials: {federation: true}}}},
  {it: 'with US user without Federation enabled', EUUser: false, attrs: {}},
  {it: 'with US user with Federation enabled', EUUser: false, attrs: {config: {credentials: {federation: true}}}}
];

runs.forEach((run) => {
  describe(`plugin-user ${run.it}`, function () {
    function isFederationEnabled() {
      return run.attrs.config &&
        run.attrs.config.credentials &&
        run.attrs.config.credentials.federation;
    }

    this.timeout(30000);

    let spark, user1, user2, user3;

    const testUserParm = {count: 3};

    if (run.EUUser) {
      testUserParm.config = {orgId: process.env.EU_PRIMARY_ORG_ID};
    }

    before(() => testUsers.create(testUserParm)
      .then((users) => {
        user1 = users[0];
        user2 = users[1];
        user3 = users[2];
        spark = new CiscoSpark(merge({}, run.attrs, {
          credentials: {
            supertoken: user1.token
          }
        }));
        assert.isDefined(spark.credentials.supertoken);
        assert.isTrue(spark.canAuthorize);
        assert.isFalse(spark.internal.user.hasPassword);

        return spark.internal.device.register();
      }));

    describe('#verify()', () => {
      const unauthSpark = new CiscoSpark(run.attrs);

      it('registers a new user', () => unauthSpark.internal.user.verify({email: `Collabctg+spark-js-sdk-${uuid.v4()}@gmail.com`})
        .then((res) => {
          assert.property(res, 'hasPassword');
          assert.property(res, 'verificationEmailTriggered');
          assert.property(res, 'sso');
          assert.isFalse(res.hasPassword);
          assert.isTrue(res.verificationEmailTriggered);
          assert.isFalse(res.sso);
          assert.isFalse(spark.internal.user.hasPassword);
        }));

      it('verifies an existing user', () => unauthSpark.internal.user.verify({email: user1.email})
        .then((res) => {
          assert.property(res, 'hasPassword');
          assert.property(res, 'verificationEmailTriggered');
          assert.property(res, 'sso');
          assert.isTrue(res.hasPassword);
          assert.isFalse(res.verificationEmailTriggered);
          assert.isFalse(res.sso);
          assert.isTrue(unauthSpark.internal.user.hasPassword);
          assert.equal(res.userEntities.idBrokerUrl, unauthSpark.config.credentials.idbroker.url);
          assert.equal(res.userEntities.identityUrl, unauthSpark.config.credentials.identity.url);
          if (run.EUUser) {
            assert.equal(res.userEntities.idBrokerUrl, 'https://idbrokerbts-eu.webex.com');
            assert.equal(res.userEntities.identityUrl, 'https://identitybts-eu.webex.com');
          }
          else {
            assert.equal(res.userEntities.idBrokerUrl, 'https://idbrokerbts.webex.com');
            assert.equal(res.userEntities.identityUrl, 'https://identitybts.webex.com');
          }
        }));

      it('verify doesn\'t reset CI on failure', () => {
        if (isFederationEnabled()) {
          unauthSpark.config.credentials.idbroker.url = 'https://idbrokerbts-eu.webex.com';
          unauthSpark.config.credentials.identity.url = 'https://identitybts-eu.webex.com';

          return unauthSpark.internal.user.verify({email: 'not an email address'})
            .catch((res) => {
              assert.statusCode(res, 400);
              assert.equal(unauthSpark.config.credentials.idbroker.url, 'https://idbrokerbts-eu.webex.com');
              assert.equal(unauthSpark.config.credentials.identity.url, 'https://identitybts-eu.webex.com');
            });
        }

        return true;
      });

      it('leaves email address validation up to Atlas', () => assert.isRejected(unauthSpark.internal.user.verify({email: 'not an email address'}))
        .then((res) => assert.statusCode(res, 400)));
    });

    describe('#setPassword()', () => {
      it('sets the user\'s password', () =>
        spark.internal.user.setPassword({email: (isFederationEnabled() ? user1.email : undefined), password: 'P@ssword123'})
          .then(() => spark.internal.user.verify({email: user1.email}))
          .then((res) => {
            assert.property(res, 'hasPassword');
            assert.property(res, 'verificationEmailTriggered');
            assert.property(res, 'sso');
            assert.isTrue(res.hasPassword);
            assert.isFalse(res.verificationEmailTriggered);
            assert.isFalse(res.sso);
            assert.isTrue(spark.internal.user.hasPassword);
            assert.equal(res.userEntities.idBrokerUrl, spark.config.credentials.idbroker.url);
            assert.equal(res.userEntities.identityUrl, spark.config.credentials.identity.url);
            if (run.EUUser) {
              assert.equal(res.userEntities.idBrokerUrl, 'https://idbrokerbts-eu.webex.com');
              assert.equal(res.userEntities.identityUrl, 'https://identitybts-eu.webex.com');
            }
            else {
              assert.equal(res.userEntities.idBrokerUrl, 'https://idbrokerbts.webex.com');
              assert.equal(res.userEntities.identityUrl, 'https://identitybts.webex.com');
            }
          }));
    });

    // NOTE: need collabctg+*@gmail.com to get verifyEmailURL
    describe('#activate()', () => {
      const unauthSpark = new CiscoSpark(run.attrs);

      it('retrieves a valid user token', () => {
        assert.isUndefined(unauthSpark.credentials.supertoken);
        const email = `collabctg+spark-js-sdk-${uuid.v4()}@gmail.com`;

        return unauthSpark.internal.user.verify({email})
          .then((res) => {
            assert.isTrue(res.verificationEmailTriggered);
            assert.property(res, 'verifyEmailURL');
            const {query} = url.parse(res.verifyEmailURL);
            const token = querystring.parse(query).t;

            return unauthSpark.internal.user.activate({email, verificationToken: token});
          })
          .then((res) => {
            assert.property(res, 'email');
            assert.property(res, 'tokenData');
            assert.equal(res.email, email);
            assert.isDefined(unauthSpark.credentials.supertoken.access_token);

            return unauthSpark.internal.user.verify({email});
          })
          .then((res) => {
            // verification email should not trigger if already have valid user token
            assert.property(res, 'hasPassword');
            assert.property(res, 'verificationEmailTriggered');
            assert.property(res, 'sso');
            assert.isFalse(res.hasPassword);
            assert.isFalse(res.verificationEmailTriggered);
            assert.isFalse(res.sso);
            assert.isFalse(unauthSpark.internal.user.hasPassword);
          });
      });

      it('retrieves a valid user token and sets the password', () => {
        const unauthSpark = new CiscoSpark(run.attrs);

        assert.isUndefined(unauthSpark.credentials.supertoken);
        const email = `collabctg+spark-js-sdk-${uuid.v4()}@gmail.com`;

        return unauthSpark.internal.user.verify({email})
          .then((res) => {
            assert.isTrue(res.verificationEmailTriggered);
            assert.property(res, 'verifyEmailURL');
            const {query} = url.parse(res.verifyEmailURL);
            const token = querystring.parse(query).t;

            return unauthSpark.internal.user.activate({email, verificationToken: token});
          })
          .then((res) => {
            assert.property(res, 'email');
            assert.property(res, 'tokenData');
            assert.equal(res.email, email);
            assert.isDefined(unauthSpark.credentials.supertoken.access_token);
          })
          .then(() => unauthSpark.internal.device.register())
          .then(() => unauthSpark.internal.user.get())
          .then((user) => unauthSpark.internal.user.setPassword({email: user.email, password: 'P@ssword123'}))
          .then(() => unauthSpark.internal.user.verify({email}))
          .then((res) => {
            assert.property(res, 'hasPassword');
            assert.property(res, 'verificationEmailTriggered');
            assert.property(res, 'sso');
            assert.isTrue(res.hasPassword);
            assert.isFalse(res.verificationEmailTriggered);
            assert.isFalse(res.sso);
            assert.isTrue(unauthSpark.internal.user.hasPassword);
          });
      });
    });

    describe('#get()', () => {
      it('gets the current user', () => spark.internal.user.get()
        .then((user) => {
          assert.equal(user.id, spark.internal.device.userId);
          assert.property(user, 'entitlements');
          assert.property(user, 'email');
          assert.property(user, 'name');
        }));
    });

    describe('#asUUID()', () => {
      function makeEmailAddress() {
        return `spark-js-sdk--test-${uuid.v4()}@example.com`;
      }

      let email;

      beforeEach(() => {
        email = makeEmailAddress();
      });

      it('maps an email address to a uuid', () => spark.internal.user.asUUID(user2, {force: true})
        .then((result) => assert.equal(result, user2.id)));

      it('maps an email address for a non-existent user to a fake uuid', () => spark.internal.user.asUUID(email)
        .then((result) => assert.match(result, patterns.uuid))
        .then(() => spark.internal.user.store.getByEmail(email))
        .then((u) => assert.isFalse(u.userExists, 'User does not exist')));

      describe('with {create: true}', () => {
        let spy;

        beforeEach(() => {
          spy = sinon.spy(spark.internal.user, 'fetchUUID');
        });
        afterEach(() => spy.restore());

        it('creates a new user', () => spark.internal.user.asUUID(email, {create: true})
          .then((result) => assert.match(result, patterns.uuid))
          .then(() => spark.internal.user.store.getByEmail(email))
          .then((u) => assert.isTrue(u.userExists, 'User exists')));

        it('does not use a cached value if the previous value was marked as non-existent', () => spark.internal.user.asUUID(email)
          .then((result) => assert.match(result, patterns.uuid))
          .then(() => spark.internal.user.store.getByEmail(email))
          .then((u) => assert.isFalse(u.userExists, 'User does not exist'))
          .then(() => spark.internal.user.asUUID(email, {create: true}), patterns.uuid)
          .then(() => spark.internal.user.store.getByEmail(email))
          .then((u) => assert.isTrue(u.userExists, 'User exists'))
          .then(() => assert.calledTwice(spy)));

        it('does not use a cached value if the previous value\'s existence is unknown', () => spark.internal.user.recordUUID({
          id: user3.id,
          emailAddress: user3.email
        })
          .then(() => spark.internal.user.store.getByEmail(user3.email))
          .then((user) => assert.isUndefined(user.userExists, 'User\'s existence is unknown'))
          .then(() => spark.internal.user.asUUID(user3.email, {create: true})
            .then((result) => assert.equal(result, user3.id)))
          .then(() => assert.called(spy))
          .then(() => spark.internal.user.store.getByEmail(user3.email))
          .then((user) => assert.isTrue(user.userExists, 'User exists')));
      });
    });

    describe('#update()', () => {
      it('updates a user\'s name', () => spark.internal.user.update({displayName: 'New Display Name'})
        .then((user) => {
          assert.equal(user.id, spark.internal.device.userId);
          assert.property(user, 'entitlements');
          assert.property(user, 'email');
          assert.property(user, 'name');
          assert.equal(user.name, 'New Display Name');
        }));
    });
  });
});
