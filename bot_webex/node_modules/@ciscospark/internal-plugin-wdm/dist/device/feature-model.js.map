{"version":3,"sources":["feature-model.js"],"names":["FeatureModel","AmpState","extend","props","key","lastModified","mutable","type","val","value","constructor","attrs","options","parse","prototype","idAttribute","num","Number","serialize","args","Date","toISOString","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAGA,IAAMA,eAAeC,yBAASC,MAAT,CAAgB;AACnCC,SAAO;AACLC,SAAK,QADA;AAELC,kBAAc,MAFT;AAGLC,aAAS,SAHJ;AAILC,UAAM,QAJD;AAKLC,SAAK,QALA;AAMLC,WAAO;AANF,GAD4B;;AAUnCC,aAVmC,uBAUvBC,KAVuB,EAUhBC,OAVgB,EAUP;AAC1BA,cAAUA,WAAW,EAArB;AACA,4BAASA,OAAT,EAAkB,EAACC,OAAO,IAAR,EAAlB;;AAEA,WAAO,qBAAcZ,yBAASa,SAAT,CAAmBJ,WAAjC,EAA8C,IAA9C,EAAoD,CAACC,KAAD,EAAQC,OAAR,CAApD,CAAP;AACD,GAfkC;;;AAiBnCG,eAAa,KAjBsB;;AAmBnCF,OAnBmC,iBAmB7BF,KAnB6B,EAmBtB;AACX,QAAI,CAACA,KAAL,EAAY;AACV,aAAO,EAAP;AACD;;AAED,QAAMK,MAAMC,OAAON,MAAMH,GAAb,CAAZ;;AAEA,QAAIG,MAAMH,GAAN,IAAa,CAAC,qBAAaQ,GAAb,CAAlB,EAAqC;AACnC;AACAL,YAAMF,KAAN,GAAcO,GAAd;AACAL,YAAMJ,IAAN,GAAa,QAAb;AACD;AACD;AALA,SAMK,IAAII,MAAMH,GAAN,KAAc,MAAlB,EAA0B;AAC7BG,cAAMF,KAAN,GAAc,IAAd;AACAE,cAAMJ,IAAN,GAAa,SAAb;AACD,OAHI,MAIA,IAAII,MAAMH,GAAN,KAAc,OAAlB,EAA2B;AAC9BG,cAAMF,KAAN,GAAc,KAAd;AACAE,cAAMJ,IAAN,GAAa,SAAb;AACD;AACD;AAJK,WAKA;AACHI,gBAAMF,KAAN,GAAcE,MAAMH,GAApB;AACAG,gBAAMJ,IAAN,GAAa,QAAb;AACD;;AAED,WAAOI,KAAP;AACD,GA/CkC;AAiDnCO,WAjDmC,uBAiDhB;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACjB,QAAMR,QAAQ,qBAAcV,yBAASa,SAAT,CAAmBI,SAAjC,EAA4C,IAA5C,EAAkDC,IAAlD,CAAd;;AAEA,QAAIR,MAAMN,YAAV,EAAwB;AACtBM,YAAMN,YAAN,GAAsB,IAAIe,IAAJ,CAAST,MAAMN,YAAf,CAAD,CAA+BgB,WAA/B,EAArB;AACD;;AAED,WAAOV,KAAP;AACD,GAzDkC;;;AA2DnC;AACA;AACA;AACAW,KA9DmC,eA8D/BlB,GA9D+B,EA8D1BK,KA9D0B,EA8DnBG,OA9DmB,EA8DV;AACvB,QAAID,cAAJ;;AAEA;AACA;AACA;AACA;AACA,QAAI,wBAASP,GAAT,KAAiBA,QAAQ,IAA7B,EAAmC;AACjCO,cAAQP,GAAR;AACAQ,gBAAUH,KAAV;AACD,KAHD,MAIK;AACHE,cAAQ,EAAR;AACAA,YAAMP,GAAN,IAAaK,KAAb;AACD;;AAEDE,YAAQ,KAAKE,KAAL,CAAWF,KAAX,EAAkBC,OAAlB,CAAR;;AAEA,WAAO,qBAAcX,yBAASa,SAAT,CAAmBQ,GAAjC,EAAsC,IAAtC,EAA4C,CAACX,KAAD,EAAQC,OAAR,CAA5C,CAAP;AACD;AAjFkC,CAAhB,CAArB,C,CAPA;;;;kBA2FeZ,Y","file":"feature-model.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nconst FeatureModel = AmpState.extend({\n  props: {\n    key: 'string',\n    lastModified: 'date',\n    mutable: 'boolean',\n    type: 'string',\n    val: 'string',\n    value: 'any'\n  },\n\n  constructor(attrs, options) {\n    options = options || {};\n    defaults(options, {parse: true});\n\n    return Reflect.apply(AmpState.prototype.constructor, this, [attrs, options]);\n  },\n\n  idAttribute: 'key',\n\n  parse(attrs) {\n    if (!attrs) {\n      return {};\n    }\n\n    const num = Number(attrs.val);\n\n    if (attrs.val && !Number.isNaN(num)) {\n      // Handle numbers.\n      attrs.value = num;\n      attrs.type = 'number';\n    }\n    // Handle booleans.\n    else if (attrs.val === 'true') {\n      attrs.value = true;\n      attrs.type = 'boolean';\n    }\n    else if (attrs.val === 'false') {\n      attrs.value = false;\n      attrs.type = 'boolean';\n    }\n    // It must be a string, so return it.\n    else {\n      attrs.value = attrs.val;\n      attrs.type = 'string';\n    }\n\n    return attrs;\n  },\n\n  serialize(...args) {\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    if (attrs.lastModified) {\n      attrs.lastModified = (new Date(attrs.lastModified)).toISOString();\n    }\n\n    return attrs;\n  },\n\n  // Override set to make sure we always run features through parse()\n  // See https://github.com/AmpersandJS/ampersand-state/issues/146 for related\n  // bug\n  set(key, value, options) {\n    let attrs;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    // The next block is a direct copy from ampersand-state, so no need to test\n    // both scenarios.\n    /* istanbul ignore next */\n    if (isObject(key) || key === null) {\n      attrs = key;\n      options = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    attrs = this.parse(attrs, options);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, options]);\n  }\n});\n\nexport default FeatureModel;\n"]}