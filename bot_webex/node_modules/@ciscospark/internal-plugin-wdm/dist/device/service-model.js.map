{"version":3,"sources":["service-model.js"],"names":["ServiceModel","AmpState","extend","props","service","defaultUrl","availableHosts","type","default","session","currentHostIndex","derived","url","deps","fn","length","host","_changeUrlHost","constructor","attrs","options","parse","prototype","idAttribute","serialize","args","sort","a","b","priority","set","key","value","markHostFailed","uri","getCurrentHost","urlObj","h","failed","cycleNextHost","i","resolve","reject","Error","doesUrlBelongToService","hosts","map","push","resetAllHosts","forEach","replaceUrlWithCurrentHost","currentUrl","format"],"mappings":"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","file":"service-model.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject, some, find} from 'lodash';\nimport url from 'url';\n\n/**\n * Represent a service parsed from wdm registration.serviceHostMap.serviceLinks and\n * registration.serviceHostMap.hostCatalog\n * @param {string} service service name from key of registration.serviceHostMap.serviceLinks\n * @param {string} defaultUrl Url provided in registration.serviceHostMap.serviceLinks\n * @param {Array<Host>} availableHosts Available datacenters from\n * registration.serviceHostMap.hostCatalog sorted by priority\n * @param {string} url Basically is the defaultUrl replaced with host provided in\n * the catalog\n * @class\n */\nconst ServiceModel = AmpState.extend({\n  /**\n    * @typedef {Object} Host - Represent a datacenter\n    * @property {int} priority - Closer to 0 is higher priority.\n    * @property {string} host - Host name.\n    * @property {boolean} failed - True when cannot connect to url.\n    */\n\n  props: {\n    service: 'string',\n    defaultUrl: 'string',\n    availableHosts: {\n      type: 'array',\n      default() {\n        return [];\n      }\n    }\n  },\n\n  session: {\n    currentHostIndex: {\n      type: 'number',\n      default: 0\n    }\n  },\n\n  derived: {\n    url: {\n      deps: ['defaultUrl', 'availableHosts', 'currentHostIndex'],\n      fn() {\n        if (this.availableHosts.length === 0) {\n          return this.defaultUrl;\n        }\n        let host;\n\n        if (this.currentHostIndex >= this.availableHosts.length) {\n          host = this.availableHosts[this.availableHosts.length - 1];\n        }\n        else {\n          host = this.availableHosts[this.currentHostIndex];\n        }\n\n        return this._changeUrlHost(this.defaultUrl, host.host);\n      }\n    }\n  },\n\n  constructor(attrs, options) {\n    options = options || {};\n    defaults(options, {parse: true});\n\n    return Reflect.apply(AmpState.prototype.constructor, this, [attrs, options]);\n  },\n\n  idAttribute: 'service',\n\n  // Override AmpersandState.serialize so we can return the latest url\n  serialize(...args) {\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    attrs.url = this.url;\n\n    return attrs;\n  },\n\n  // Override parse\n  parse(attrs) {\n    if (!attrs) {\n      return {};\n    }\n\n    if (attrs.availableHosts) {\n      // ensure highest priority is at the top\n      // using number value here instead boolean for IE and Edge\n      // https://github.com/tc39/ecma262/issues/902\n      attrs.availableHosts.sort((a, b) => a.priority - b.priority);\n    }\n\n    return attrs;\n  },\n\n  // Override set to make sure we always run parse()\n  // See https://github.com/AmpersandJS/ampersand-state/issues/146 for related\n  // bug\n  set(key, value, options) {\n    let attrs;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    // The next block is a direct copy from ampersand-state, so no need to test\n    // both scenarios.\n    /* istanbul ignore next */\n    if (isObject(key) || key === null) {\n      attrs = key;\n      options = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n    }\n\n    attrs = this.parse(attrs, options);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, options]);\n  },\n\n\n  /**\n   * Mark the current host as failing or if a uri is provided, find the host\n   * and mark it as fail\n   * @param {string} uri Mark the host of this url as fail\n   * @returns {undefined}\n   */\n  markHostFailed(uri) {\n    let host = this.getCurrentHost();\n\n    if (uri) {\n      const urlObj = url.parse(uri);\n\n      host = find(this.availableHosts, (h) => h.host === urlObj.host);\n    }\n\n    if (host) {\n      host.failed = true;\n    }\n  },\n\n  /**\n   * Return the next available host, which is usually the next higher priority\n   * host that has not yet been marked as failed\n   * @returns {Promise<Host>}\n   */\n  cycleNextHost() {\n    for (let i = 0; i < this.availableHosts.length; i += 1) {\n      const host = this.availableHosts[i];\n\n      if (!host.failed && this.currentHostIndex !== i) {\n        this.currentHostIndex = i;\n\n        return Promise.resolve(host);\n      }\n    }\n    // this means all hosts have failed\n    this.currentHostIndex = 0;\n\n    return Promise.reject(new Error(`All hosts have failed for ${this.service}`));\n  },\n\n  /**\n   * Check if a url comes from this service\n   * @param {string} uri\n   * @returns {Boolean}\n   */\n  doesUrlBelongToService(uri) {\n    const urlObj = url.parse(uri);\n    const hosts = this.availableHosts.map((h) => h.host);\n\n    hosts.push(url.parse(this.defaultUrl).host);\n\n    return some(hosts, (host) => host === urlObj.host);\n  },\n\n  /**\n   * Return the current host/datacenter\n   * @returns {Host}\n   */\n  getCurrentHost() {\n    return this.availableHosts[this.currentHostIndex];\n  },\n\n  /**\n   * Resets all host/datacenter for a retry\n   * @returns {undefined}\n   */\n  resetAllHosts() {\n    this.availableHosts.forEach((host) => {\n      host.failed = false;\n    });\n  },\n\n  /**\n   * Replace provided url by the current active host\n   * @param {string} uri\n   * @returns {string} uri\n   */\n  replaceUrlWithCurrentHost(uri) {\n    return this._changeUrlHost(uri, this.getCurrentHost().host);\n  },\n\n  _changeUrlHost(currentUrl, host) {\n    const urlObj = url.parse(currentUrl);\n\n    urlObj.host = host;\n\n    return url.format(urlObj);\n  }\n});\n\nexport default ServiceModel;\n"]}