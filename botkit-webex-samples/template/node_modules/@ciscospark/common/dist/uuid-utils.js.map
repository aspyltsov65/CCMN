{"version":3,"sources":["uuid-utils.js"],"names":["constructHydraId","deconstructHydraId","getHydraFiles","hydraBaseResource","hydraBaseUrl","type","id","toUpperCase","payload","split","pop","activity","hydraFiles","files","object","items","i","length","contentId","hydraTypes","CONTENT","push"],"mappings":";;;;;QAcgBA,gB,GAAAA,gB;QAWAC,kB,GAAAA,kB;QAgBAC,a,GAAAA,a;;AAzChB;;AACA;;AAEA,IAAMC,oBAAoB,iBAA1B;AACA,IAAMC,eAAe,+BAArB;;AAEA;;;;;;;;AAQO,SAASJ,gBAAT,CAA0BK,IAA1B,EAAgCC,EAAhC,EAAoC;AACzC,SAAO,kBAAUH,iBAAV,SAA+BE,KAAKE,WAAL,EAA/B,SAAqDD,EAArD,CAAP;AACD;;AAED;;;;;;;AAOO,SAASL,kBAAT,CAA4BK,EAA5B,EAAgC;AACrC,MAAME,UAAU,kBAAOF,EAAP,EAAWG,KAAX,CAAiB,GAAjB,CAAhB;;AAEA,SAAO;AACLH,QAAIE,QAAQE,GAAR,EADC;AAELL,UAAMG,QAAQE,GAAR;AAFD,GAAP;AAID;;AAED;;;;;;;AAOO,SAASR,aAAT,CAAuBS,QAAvB,EAAiC;AACtC,MAAMC,aAAa,EAAnB;AADsC,MAE/BC,KAF+B,GAEtBF,SAASG,MAFa,CAE/BD,KAF+B;;;AAItC,MAAIA,KAAJ,EAAW;AAAA,QACFE,KADE,GACOF,KADP,CACFE,KADE;;AAGT;;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAME,MAA1B,EAAkCD,KAAK,CAAvC,EAA0C;AACxC,UAAME,YACJlB,iBAAiBmB,sBAAWC,OAA5B,EAAwCT,SAASL,EAAjD,SAAuDU,CAAvD,CADF;;AAGAJ,iBAAWS,IAAX,CAAmBjB,YAAnB,kBAA4Cc,SAA5C;AACD;AACF;;AAED,SAAON,UAAP;AACD","file":"uuid-utils.js","sourcesContent":["import {encode, decode} from './base64';\nimport {hydraTypes} from './constants';\n\nconst hydraBaseResource = 'ciscospark://us';\nconst hydraBaseUrl = 'https://api.ciscospark.com/v1';\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id\n * @returns {string}\n */\nexport function constructHydraId(type, id) {\n  return encode(`${hydraBaseResource}/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * Deconstructs a Hydra ID and provides the UUID.\n *\n * @export\n * @param {String} id\n * @returns {String}\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop()\n  };\n}\n\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @returns {Array} file URLs\n */\nexport function getHydraFiles(activity) {\n  const hydraFiles = [];\n  const {files} = activity.object;\n\n  if (files) {\n    const {items} = files;\n\n    // Note: Generated ID is dependent on file order.\n    for (let i = 0; i < items.length; i += 1) {\n      const contentId =\n        constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`);\n\n      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);\n    }\n  }\n\n  return hydraFiles;\n}\n"]}